name: .NET

on:
  release:
    types:
      - created
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: windows-latest
    env:
      event_name: ${{ github.event_name }}

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Setup .NET 3.1.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET 5.0.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Setup .NET 6.0.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

      # This is important if you want auto-versioning.
    - name: Setup Dependencies
      run: |
        dotnet --version
        "nuget config -set signatureValidationMode=accept -configfile ./nuget.config -verbosity detailed"
        nuget config -set signatureValidationMode=accept -configfile ./nuget.config -verbosity detailed
        if($LASTEXITCODE -ne 0) { throw 'Setting nuget config failed.' }
        "dotnet nuget trust --allow-untrusted-root true --configfile ./nuget.config --verbosity detailed"
        dotnet nuget trust --allow-untrusted-root true --configfile ./nuget.config --verbosity detailed
        if($LASTEXITCODE -ne 0) { throw 'Setting nuget trust failed.' }
        dotnet tool install --global GitVersion.Tool --prerelease --configfile ./nuget.config --verbosity detailed
        if($LASTEXITCODE -ne 0) { throw 'Installing `GitVersion.Tool` 5.8.1 failed.' }
        dotnet tool install --global PowerShell --prerelease --configfile ./nuget.config --verbosity detailed
        if($LASTEXITCODE -ne 0) { throw 'Installing `Powershell` failed.' }
        dotnet-gitversion
        if($LASTEXITCODE -ne 0) { throw 'Executing `dotnet-gitversion` failed.' }

    - name: Build Debug and Test
      if: ${{ github.event_name == 'push' }}
      run: |
        cd ./SingleFileCSharp 
        . ./build.ps1 --root .

#     - name: Build Release and Publish
#       if: ${{ github.event_name == 'release' || github.event_name == 'workflow_dispatch' }}
#       run: . ./scripts/publish.ps1 "${{ secrets.NUGET_KEY }}"
